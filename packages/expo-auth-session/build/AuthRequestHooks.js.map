{"version":3,"file":"AuthRequestHooks.js","sourceRoot":"","sources":["../src/AuthRequestHooks.ts"],"names":[],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { Linking, Platform } from 'react-native';\n\nimport {\n  AuthRequest,\n  AuthRequestConfig,\n  clearQueryParams,\n  maybeCompleteAuthRequestAfterRedirectAsync,\n} from './AuthRequest';\nimport { AuthSessionResult } from './AuthSession.types';\nimport { Discovery, IssuerOrDiscovery, resolveDiscoveryAsync } from './Discovery';\nimport { Headers, requestAsync } from './Fetch';\nimport * as QueryParams from './QueryParams';\n\nexport function useLinking(): string | null {\n  const [link, setLink] = useState<string | null>(null);\n\n  function onChange({ url }: { url: string | null }) {\n    setLink(url);\n  }\n\n  useEffect(() => {\n    Linking.getInitialURL().then(url => setLink(url));\n    Linking.addEventListener('url', onChange);\n    return () => {\n      Linking.removeEventListener('url', onChange);\n    };\n  }, []);\n\n  return link;\n}\n\nexport function useQueryParams(): Record<string, string> | null {\n  const [queryParams, setQueryParams] = useState<Record<string, string> | null>(null);\n  const link = useLinking();\n  useEffect(() => {\n    if (link) {\n      const { params } = QueryParams.getQueryParams(link);\n      setQueryParams(params);\n    } else {\n      setQueryParams(null);\n    }\n  }, [link]);\n\n  return queryParams;\n}\n\nexport function useDiscovery(issuerOrDiscovery: IssuerOrDiscovery): Discovery | null {\n  const [discovery, setDiscovery] = useState<Discovery | null>(null);\n\n  useEffect(() => {\n    resolveDiscoveryAsync(issuerOrDiscovery).then(discovery => {\n      setDiscovery(discovery);\n    });\n  }, [issuerOrDiscovery]);\n\n  return discovery;\n}\n\nexport function useJsonFetchRequest<T>(\n  accessToken: string,\n  requestUrl: string,\n  headers: Headers,\n  method: string = 'GET'\n): [T | null, Error | null] {\n  const [json, setJson] = useState<T | null>(null);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    if (accessToken) {\n      requestAsync<T>(requestUrl, {\n        // @ts-ignore\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          ...headers,\n        },\n        method,\n        dataType: 'json',\n      })\n        .then(json => {\n          setJson(json);\n          setError(null);\n        })\n        .catch(error => {\n          setJson(null);\n          setError(error);\n        });\n    }\n  }, [accessToken]);\n\n  return [json, error];\n}\n\nexport function useCompleteRedirect(): AuthSessionResult | null {\n  if (Platform.OS !== 'web') return null;\n\n  const [authState, setAuthState] = useState<AuthSessionResult | null>(null);\n  const link = useLinking();\n\n  useEffect(() => {\n    if (link)\n      maybeCompleteAuthRequestAfterRedirectAsync(link).then(result => {\n        if (result) {\n          clearQueryParams();\n          setAuthState(result);\n        }\n      });\n  }, [link]);\n\n  return authState;\n}\n\nexport function useAuthRequest(config: AuthRequestConfig): AuthRequest | null {\n  const [request, setRequest] = useState<AuthRequest | null>(null);\n\n  useEffect(() => {\n    if (config) {\n      AuthRequest.buildAsync({\n        ...config,\n      }).then(request => setRequest(request));\n    }\n  }, [\n    config.clientId,\n    config.redirectUri,\n    config.scopes.join(','),\n    config.clientSecret,\n    config.codeChallenge,\n    config.state,\n    JSON.stringify(config.extraParams || {}),\n    config.usePKCE,\n    JSON.stringify(config.discovery || {}),\n    config.issuer,\n  ]);\n\n  return request;\n}\n"]}